# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newTransaction.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QCompleter
from PyQt5.QtCore import QDate
from datetime import timedelta
import mysql.connector

mydb = mysql.connector.connect(
    host="127.0.0.1",
    user="local",
    password="",
    database="mpdev"
)


class Ui_TransactionWindow(object):
    def setupUi(self, TransactionWindow):
        TransactionWindow.setObjectName("TransactionWindow")
        TransactionWindow.resize(1157, 851)
        TransactionWindow.setStyleSheet("QMainWindow{\n"
                                        "background-color: #212121;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton{\n"
                                        "background-color: #212121;\n"
                                        "Color: #eeeeee;\n"
                                        "border-radius: 20px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#addButton{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#addButton:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "background-color: #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#submitButton{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 25px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#submitButton:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "background-color: #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#cancelButton{\n"
                                        "color: #eeeeee;\n"
                                        "background-color: #212121;\n"
                                        "border: 2px solid #9a0002;\n"
                                        "border-radius: 25px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#cancelButton:hover{\n"
                                        "border: 3px solid rgb(255, 0, 0);\n"
                                        "background-color: #9a0002;\n"
                                        "}\n"
                                        "\n"
                                        "QLineEdit{\n"
                                        "padding-left: 6px;\n"
                                        "padding-right: 6px;\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QLineEdit:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QTextEdit{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QTextEdit:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QListWidget{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "}\n"
                                        "\n"
                                        "QListWidget:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QSpinBox{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "}\n"
                                        "\n"
                                        "QSpinBox:hover{\n"
                                        "border: 2px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QLabel{\n"
                                        "color: #eeeeee;\n"
                                        "}\n"
                                        "\n"
                                        "QLabel#transactionLabel{\n"
                                        "color: #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox{\n"
                                        "border: 2px solid #0d7377;\n"
                                        "border-radius: 5px;\n"
                                        "padding-left: 4px;\n"
                                        "padding-right: 4px;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox:hover{\n"
                                        "border: 3px solid #32e0c4;\n"
                                        "}\n"
                                        "\n"
                                        "QComboBox QAbstractItemView {\n"
                                        "border: 2px solid #32e0c4;\n"
                                        "selection-background-color: #0d7377;\n"
                                        "}\n"
                                        "")
        self.centralwidget = QtWidgets.QWidget(TransactionWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 2, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 1, 0, 1, 1)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.transactionLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.transactionLabel.setFont(font)
        self.transactionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionLabel.setObjectName("transactionLabel")
        self.verticalLayout_4.addWidget(self.transactionLabel)
        spacerItem3 = QtWidgets.QSpacerItem(20, 130, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.verticalLayout_4.addItem(spacerItem3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.studentNameLabel = QtWidgets.QLabel(self.centralwidget)
        self.studentNameLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.studentNameLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.studentNameLabel.setFont(font)
        self.studentNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.studentNameLabel.setObjectName("studentNameLabel")
        self.verticalLayout_2.addWidget(self.studentNameLabel)
        self.nameInput = QtWidgets.QLineEdit(self.centralwidget)
        self.nameInput.setMinimumSize(QtCore.QSize(300, 40))
        self.nameInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.nameInput.setFont(font)
        self.nameInput.setText("")
        self.nameInput.setClearButtonEnabled(True)
        self.nameInput.setObjectName("nameInput")
        self.verticalLayout_2.addWidget(self.nameInput)
        spacerItem4 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.verticalLayout_2.addItem(spacerItem4)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.installmentNoLabel = QtWidgets.QLabel(self.centralwidget)
        self.installmentNoLabel.setMinimumSize(QtCore.QSize(180, 40))
        self.installmentNoLabel.setMaximumSize(QtCore.QSize(180, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.installmentNoLabel.setFont(font)
        self.installmentNoLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.installmentNoLabel.setObjectName("installmentNoLabel")
        self.horizontalLayout.addWidget(self.installmentNoLabel)
        self.installmentNoInput = QtWidgets.QLineEdit(self.centralwidget)
        self.installmentNoInput.setEnabled(False)
        self.installmentNoInput.setMinimumSize(QtCore.QSize(110, 40))
        self.installmentNoInput.setMaximumSize(QtCore.QSize(110, 40))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.installmentNoInput.setFont(font)
        self.installmentNoInput.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentNoInput.setClearButtonEnabled(False)
        self.installmentNoInput.setObjectName("installmentNoInput")
        self.horizontalLayout.addWidget(self.installmentNoInput)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.installmentAmtLabel = QtWidgets.QLabel(self.centralwidget)
        self.installmentAmtLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.installmentAmtLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.installmentAmtLabel.setFont(font)
        self.installmentAmtLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentAmtLabel.setObjectName("installmentAmtLabel")
        self.verticalLayout_2.addWidget(self.installmentAmtLabel)
        self.installmentAmtInput = QtWidgets.QLineEdit(self.centralwidget)
        self.installmentAmtInput.setEnabled(False)
        self.installmentAmtInput.setMinimumSize(QtCore.QSize(300, 40))
        self.installmentAmtInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.installmentAmtInput.setFont(font)
        self.installmentAmtInput.setAlignment(QtCore.Qt.AlignCenter)
        self.installmentAmtInput.setClearButtonEnabled(False)
        self.installmentAmtInput.setObjectName("installmentAmtInput")
        self.verticalLayout_2.addWidget(self.installmentAmtInput)
        self.transactionAmtLabel = QtWidgets.QLabel(self.centralwidget)
        self.transactionAmtLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.transactionAmtLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.transactionAmtLabel.setFont(font)
        self.transactionAmtLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionAmtLabel.setObjectName("transactionAmtLabel")
        self.verticalLayout_2.addWidget(self.transactionAmtLabel)
        self.transactionAmtInput = QtWidgets.QLineEdit(self.centralwidget)
        self.transactionAmtInput.setMinimumSize(QtCore.QSize(300, 40))
        self.transactionAmtInput.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.transactionAmtInput.setFont(font)
        self.transactionAmtInput.setText("")
        self.transactionAmtInput.setAlignment(QtCore.Qt.AlignCenter)
        self.transactionAmtInput.setClearButtonEnabled(True)
        self.transactionAmtInput.setObjectName("transactionAmtInput")
        self.verticalLayout_2.addWidget(self.transactionAmtInput)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setMinimumSize(QtCore.QSize(5, 0))
        self.line.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line.setStyleSheet("background-color: #32e0c4;")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_2.addWidget(self.line)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.dateLabel = QtWidgets.QLabel(self.centralwidget)
        self.dateLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.dateLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.dateLabel.setFont(font)
        self.dateLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.dateLabel.setObjectName("dateLabel")
        self.verticalLayout.addWidget(self.dateLabel)
        self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit.setDisplayFormat("yyyy-MM-dd")
        self.dateEdit.setMinimumSize(QtCore.QSize(300, 40))
        self.dateEdit.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.dateEdit.setFont(font)
        self.dateEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.dateEdit.setDate(QDate.currentDate())
        self.verticalLayout.addWidget(self.dateEdit)
        self.modeOfPaymentLabel = QtWidgets.QLabel(self.centralwidget)
        self.modeOfPaymentLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.modeOfPaymentLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.modeOfPaymentLabel.setFont(font)
        self.modeOfPaymentLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.modeOfPaymentLabel.setObjectName("modeOfPaymentLabel")
        self.verticalLayout.addWidget(self.modeOfPaymentLabel)
        self.modeOfPaymentComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.modeOfPaymentComboBox.setEnabled(True)
        self.modeOfPaymentComboBox.setMinimumSize(QtCore.QSize(300, 40))
        self.modeOfPaymentComboBox.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.modeOfPaymentComboBox.setFont(font)
        self.modeOfPaymentComboBox.setObjectName("modeOfPaymentComboBox")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.modeOfPaymentComboBox.addItem("")
        self.verticalLayout.addWidget(self.modeOfPaymentComboBox)
        self.remarkLabel = QtWidgets.QLabel(self.centralwidget)
        self.remarkLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.remarkLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.remarkLabel.setFont(font)
        self.remarkLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.remarkLabel.setObjectName("remarkLabel")
        self.verticalLayout.addWidget(self.remarkLabel)
        self.remarkInput = QtWidgets.QTextEdit(self.centralwidget)
        self.remarkInput.setMinimumSize(QtCore.QSize(300, 80))
        self.remarkInput.setMaximumSize(QtCore.QSize(300, 80))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.remarkInput.setFont(font)
        self.remarkInput.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.remarkInput.setObjectName("remarkInput")
        self.verticalLayout.addWidget(self.remarkInput)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem8)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setMinimumSize(QtCore.QSize(5, 0))
        self.line_2.setMaximumSize(QtCore.QSize(5, 16777215))
        self.line_2.setStyleSheet("background-color: #32e0c4;")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_2.addWidget(self.line_2)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.previousTransLabel = QtWidgets.QLabel(self.centralwidget)
        self.previousTransLabel.setMinimumSize(QtCore.QSize(300, 40))
        self.previousTransLabel.setMaximumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.previousTransLabel.setFont(font)
        self.previousTransLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.previousTransLabel.setObjectName("previousTransLabel")
        self.verticalLayout_3.addWidget(self.previousTransLabel)
        self.transactionsList = QtWidgets.QListWidget(self.centralwidget)
        self.transactionsList.setMinimumSize(QtCore.QSize(300, 300))
        self.transactionsList.setMaximumSize(QtCore.QSize(300, 300))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.transactionsList.setFont(font)
        self.transactionsList.setDragEnabled(True)
        self.transactionsList.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.transactionsList.setDefaultDropAction(QtCore.Qt.MoveAction)
        self.transactionsList.setObjectName("transactionsList")
        self.verticalLayout_3.addWidget(self.transactionsList)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        spacerItem11 = QtWidgets.QSpacerItem(20, 60, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem11)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem12)
        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setMinimumSize(QtCore.QSize(130, 50))
        self.submitButton.setMaximumSize(QtCore.QSize(130, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.submitButton.setFont(font)
        self.submitButton.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.submitButton.setObjectName("submitButton")
        self.horizontalLayout_3.addWidget(self.submitButton)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem13)
        self.cancelButton = QtWidgets.QPushButton(self.centralwidget)
        self.cancelButton.setMinimumSize(QtCore.QSize(130, 50))
        self.cancelButton.setMaximumSize(QtCore.QSize(130, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.cancelButton.setFont(font)
        self.cancelButton.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.cancelButton.setObjectName("cancelButton")
        self.horizontalLayout_3.addWidget(self.cancelButton)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem14)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.gridLayout.addLayout(self.verticalLayout_4, 1, 1, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.gridLayout.addItem(spacerItem15, 0, 1, 1, 1)
        TransactionWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(TransactionWindow)
        self.statusbar.setObjectName("statusbar")
        TransactionWindow.setStatusBar(self.statusbar)
        self.installment_id=None
        # Completer
        cursor = mydb.cursor()
        sql_name_query = "SELECT DISTINCT s.first_name,s.middle_name,s.last_name FROM student_info s, payment_table p where s.student_id=p.student_id"
        cursor.execute(sql_name_query)
        lst = cursor.fetchall()
        if len(lst) != 0:
            lst = [' '.join(x) for x in lst]
        else:
            lst = []
        completer = QCompleter(lst, self.nameInput)
        completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        completer.setFilterMode(QtCore.Qt.MatchContains)
        self.nameInput.setCompleter(completer)

        self.retranslateUi(TransactionWindow)

        self.nameInput.textChanged.connect(self.setValues)
        # submit button
        self.submitButton.clicked.connect(self.submitTransaction)

        QtCore.QMetaObject.connectSlotsByName(TransactionWindow)

    def setValues(self):
        self.transactionsList.clear()

        self.stud_name = self.nameInput.text()
        cursor = mydb.cursor(buffered=True)
        name_val = tuple(self.stud_name.split(" "))
        if len(name_val)==3:
            sql_name = "SELECT student_id FROM student_info WHERE first_name =(%s) AND middle_name =(%s) AND last_name =(%s)"
            cursor.execute(sql_name, name_val)
            self.stud_id = cursor.fetchone()  # got student id

            sql_payment = "SELECT payment_id FROM payment_table WHERE student_id=" + str(self.stud_id[0]) + " ORDER BY payment_id DESC"
            cursor.execute(sql_payment)
            self.pay_id = cursor.fetchone()  # got payment id

            sql = "SELECT installment_no,installment_amt,installment_id FROM installments_table WHERE student_id=(%s) AND payment_id=(%s) AND status=(%s) ORDER BY payment_id DESC"
            install_val = (self.stud_id[0],self.pay_id[0],'Not Paid')
            cursor.execute(sql, install_val)
            # self.installment_id = cursor.fetchone()  # got installment id
            # get_query = "SELECT installment_no,installment_amt FROM installments_table WHERE installment_id="+ str(self.installment_id[0])
            # cursor.execute(get_query)
            temp =cursor.fetchone()
            if cursor.rowcount!=0:
                self.display_installment_values = temp  # got installment_no and installment_amt
                print(self.display_installment_values)
                installment_no = temp[0]
                installment_amt = temp[1]
                self.installment_id=temp[2]
                #setting the real installment values
                self.installmentNoInput.setText(str(installment_no))
                self.installmentAmtInput.setText(str(installment_amt))

            #Adding previous payment list in listview


            insert_prev_details_query = "SELECT installment_no,transaction_amt,transaction_date FROM transaction_table WHERE student_id=(%s) AND payment_id=(%s)  ORDER BY installment_id "
            insert_prev_details_val = (self.stud_id[0], self.pay_id[0])
            cursor.execute(insert_prev_details_query,insert_prev_details_val)
            lst_of_prev_details = cursor.fetchall()   #got prev list of paid transactions of the student
            if lst_of_prev_details:
                    title = "No. "+"  Amount"+"    Date"
                    self.transactionsList.addItem(title)
                    for x in lst_of_prev_details:
                            lst = str(x[0]) + ":     " + str(x[1]) + "            " + str(x[2])
                            self.transactionsList.addItem(lst)
            else:
                    self.transactionsList.addItem("  No Installment Paid yet ! ")


    def submitTransaction(self):
        cursor = mydb.cursor(buffered=True)
        self.trans_amt = self.transactionAmtInput.text()
        self.trans_date = self.dateEdit.date().toPyDate()
        self.remark = self.remarkInput.toPlainText()
        self.mode_of_payment = self.modeOfPaymentComboBox.currentText()
        if self.trans_amt != "" and self.trans_date != "":
            self.trans_amt = int(self.trans_amt)
            # comparing payments
            if self.trans_amt == self.display_installment_values[1]:
                print("val enter")
                #update installment table
                sql_submit_installments_table = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                                                "WHERE installment_id=(%s)"
                sql_submit_installments_val = (self.trans_amt,'Paid',self.installment_id)
                cursor.execute(sql_submit_installments_table,sql_submit_installments_val)
                mydb.commit()
                #insert in transaction table
                sql_trans_table = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                                  "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                sql_trans_val = (self.stud_id[0],self.pay_id[0],self.installment_id,self.display_installment_values[0],self.trans_amt,self.trans_date,
                                 self.mode_of_payment,self.remark)
                cursor.execute(sql_trans_table,sql_trans_val)
                mydb.commit()
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("Data Submitted")
                msg.setWindowTitle("Successful")
                msg.exec_()
                self.nameInput.clear()
                self.installmentNoInput.clear()
                self.installmentAmtInput.clear()
                self.transactionAmtInput.clear()
                self.transactionsList.clear()
                self.remarkInput.clear()
                self.modeOfPaymentComboBox.setCurrentIndex(0)
                self.dateEdit.setDate(QDate.currentDate())
            elif self.trans_amt > self.display_installment_values[1]:
                print("more")
                #fetching all pending installments
                query = "SELECT installment_no FROM installments_table WHERE payment_id=(%s) AND status=(%s)"
                val = (self.pay_id[0],'Not Paid')
                cursor.execute(query,val)
                self.install_nos = cursor.fetchall() #how many installments not paid

                query = "SELECT installment_amt FROM installments_table WHERE payment_id=(%s) AND status=(%s)"
                val = (self.pay_id[0], 'Not Paid')
                cursor.execute(query, val)
                self.install_amts = cursor.fetchall()  # how many installments not paid

                query = "SELECT installment_id FROM installments_table WHERE payment_id=(%s) AND status=(%s)"
                val = (self.pay_id[0], 'Not Paid')
                cursor.execute(query, val)
                self.install_id = cursor.fetchall()
                id_lst = []
                for i in self.install_id:
                    id_lst.append((i[0]))
                print(id_lst)#lst of installment ids not paid
                count=0
                total = 0
                install_no = 0
                for i in self.install_nos:
                    count += 1

                for t in self.install_amts:
                    total += t[0]
                if count==1: #its last installment
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Warning)
                    msg.setText("This is your Last Installment and the amount you are paying is more than the real amount to be paid."
                                "\nPlease enter correct amount")
                    msg.setWindowTitle("Warning")
                    msg.exec_()
                elif count>1:
                    if self.trans_amt == total:
                        sql = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                                  "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                        values = (self.stud_id[0],self.pay_id[0],self.installment_id,self.display_installment_values[0],
                                  self.trans_amt,self.trans_date,self.mode_of_payment,self.remark)
                        cursor.execute(sql,values)
                        mydb.commit()
                        del_sql = "DELETE FROM installments_table WHERE installment_id BETWEEN (%s) AND (%s)"
                        del_val = ((self.installment_id+1),id_lst[-1])
                        cursor.execute(del_sql,del_val)
                        mydb.commit()
                        sql_up = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                                                "WHERE installment_id=(%s)"
                        val_up = (self.trans_amt,'Paid',self.installment_id)
                        cursor.execute(sql_up,val_up)
                        mydb.commit()
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Information)
                        msg.setText("You have completed Full Payment Successfully..No due left !!")
                        msg.setWindowTitle("Successful")
                        msg.exec_()
                        print("insert value..update table..msg box says full payment complete..delete all other installments")
                    elif self.trans_amt>total:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Warning)
                        msg.setText("The amount you have entered is more than the total amount to be paid. "
                                    "\nPlease enter correct amount.")
                        msg.setWindowTitle("Warning")
                        msg.exec_()
                        print("warning ki total amt is more that install total")
                    elif self.trans_amt<total:
                        amt = self.trans_amt
                        for x in self.install_amts:
                            x = int(str(x[0]))
                            self.id_val = 0
                            j = 0
                            for id in id_lst:
                                if id == self.installment_id:
                                    self.id_val = j  # index of 1st not paid installment id
                                j += 1
                            in_no = self.display_installment_values[0]
                            while amt>0:
                                if amt >= x:
                                    print(id_lst[self.id_val],in_no)
                                    sql = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                                          "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                                    values = (self.stud_id[0], self.pay_id[0], id_lst[self.id_val],in_no,
                                              x, self.trans_date, self.mode_of_payment, self.remark)
                                    cursor.execute(sql, values)
                                    mydb.commit()
                                    sql_up = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                                             "WHERE installment_id=(%s)"
                                    val_up = (x, 'Paid', id_lst[self.id_val])
                                    cursor.execute(sql_up, val_up)
                                    mydb.commit()
                                    print("update as paid and in trans table")
                                    amt -= x
                                    count -= 1
                                    self.id_val += 1
                                    in_no += 1
                                else:
                                    print(id_lst[self.id_val], in_no)
                                    sql = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                                          "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                                    values = (self.stud_id[0], self.pay_id[0], id_lst[self.id_val],in_no,
                                              amt, self.trans_date, self.mode_of_payment, self.remark)
                                    cursor.execute(sql, values)
                                    mydb.commit()
                                    x -= amt
                                    sql_up = "UPDATE installments_table SET installment_amt=(%s)" \
                                             "WHERE installment_id=(%s)"
                                    val_up = (x, id_lst[self.id_val])
                                    cursor.execute(sql_up, val_up)
                                    mydb.commit()
                                    print("add in transaction")
                                    #self.id_val += 1
                                    amt=0
                                    count -= 1
                        mydb.commit()
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Information)
                        msg.setText("You have completed Payment Successfully !!")
                        msg.setWindowTitle("Successful")
                        msg.exec_()
                        self.nameInput.clear()
                        self.installmentNoInput.clear()
                        self.installmentAmtInput.clear()
                        self.transactionAmtInput.clear()
                        self.transactionsList.clear()
                        self.remarkInput.clear()
                        self.modeOfPaymentComboBox.setCurrentIndex(0)
                        self.dateEdit.setDate(QDate.currentDate())

            elif self.trans_amt < self.display_installment_values[1]:
                print("less")
                query = "SELECT installment_no FROM installments_table WHERE payment_id=(%s) AND status=(%s)"
                val = (self.pay_id[0], 'Not Paid')
                cursor.execute(query, val)
                self.install_nos = cursor.fetchall()  # how many installments not paid

                query = "SELECT installment_id FROM installments_table WHERE payment_id=(%s) AND status=(%s)"
                val = (self.pay_id[0], 'Not Paid')
                cursor.execute(query, val)
                self.install_id = cursor.fetchall()
                id_list = []
                j=0
                id=0
                for i in self.install_id:    #install id list
                    id_list.append((i[0]))
                for x in id_list:
                    if self.display_installment_values[1]==x:
                        id = j
                    j += 1
                count=0
                print(id)
                for i in self.install_nos:
                    count += 1
                amt = self.trans_amt
                remaining = self.display_installment_values[1] - amt
                in_no = self.display_installment_values[0]
                if count > 1:
                    sql = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                          "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                    values = (self.stud_id[0], self.pay_id[0], id_list[id], in_no,
                              amt, self.trans_date, self.mode_of_payment, self.remark)
                    cursor.execute(sql, values)
                    mydb.commit()

                    sql_up = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                             "WHERE installment_id=(%s)"
                    val_up = (amt, 'Paid', id_list[id])
                    cursor.execute(sql_up, val_up)
                    mydb.commit()

                    id += 1
                    sql = "INSERT INTO installments_table (installment_amt) VALUES (%s) WHERE installment_id=(%s)"
                    sql_val = (remaining, id_list[id])
                    cursor.execute(sql, sql_val)
                    mydb.commit()


                elif count==1:
                    sql = "INSERT INTO transaction_table(student_id,payment_id,installment_id,installment_no," \
                          "transaction_amt,transaction_date,mode_of_payment,remarks) VALUES(%s,%s,%s,%s,%s,%s,%s,%s)"
                    values = (self.stud_id[0], self.pay_id[0], id_list[id], in_no,
                              amt, self.trans_date, self.mode_of_payment, self.remark)
                    cursor.execute(sql, values)
                    mydb.commit()

                    sql_up = "UPDATE installments_table SET installment_amt=(%s),status=(%s)" \
                             "WHERE installment_id=(%s)"
                    val_up = (amt, 'Paid', id_list[id])
                    cursor.execute(sql_up, val_up)
                    mydb.commit()

                    date = self.trans_date + timedelta(30)
                    print(date)
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setText("Your remaining amount is added as new installment to be paid on "+str(date))
                    msg.setWindowTitle("Information")
                    msg.exec_()

                    sql = "INSERT INTO installments_table(student_id,payment_id,status,installment_amt,installment_no,installment_date) VALUES (%s,%s,%s,%s,%s,%s)"
                    sql_val = (self.stud_id[0],self.pay_id[0],'Not Paid',remaining, in_no+1,date)
                    cursor.execute(sql,sql_val)
                    mydb.commit()

            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("You have completed Payment Successfully !!")
            msg.setWindowTitle("Successful")
            msg.exec_()
            self.nameInput.clear()
            self.installmentNoInput.clear()
            self.installmentAmtInput.clear()
            self.transactionAmtInput.clear()
            self.transactionsList.clear()
            self.remarkInput.clear()
            self.modeOfPaymentComboBox.setCurrentIndex(0)
            self.dateEdit.setDate(QDate.currentDate())


        print("submit")




    def retranslateUi(self, TransactionWindow):
        _translate = QtCore.QCoreApplication.translate
        TransactionWindow.setWindowTitle(_translate("TransactionWindow", "MainWindow"))
        self.transactionLabel.setText(_translate("TransactionWindow", "NEW TRANSACTION"))
        self.studentNameLabel.setText(_translate("TransactionWindow", "Student\'s Name"))
        self.installmentNoLabel.setText(_translate("TransactionWindow", "Installment Number: "))
        self.installmentNoInput.setText(_translate("TransactionWindow", "xx"))
        self.installmentAmtLabel.setText(_translate("TransactionWindow", "Actual Installment Amount"))
        self.installmentAmtInput.setText(_translate("TransactionWindow", "xxxxx"))
        self.transactionAmtLabel.setText(_translate("TransactionWindow", "Transaction Amount"))
        self.dateLabel.setText(_translate("TransactionWindow", "Select Date"))
        self.modeOfPaymentLabel.setText(_translate("TransactionWindow", "Mode of Payment"))
        self.modeOfPaymentComboBox.setItemText(0, _translate("TransactionWindow", "Cash"))
        self.modeOfPaymentComboBox.setItemText(1, _translate("TransactionWindow", "Cheque"))
        self.modeOfPaymentComboBox.setItemText(2, _translate("TransactionWindow", "Google Pay"))
        self.modeOfPaymentComboBox.setItemText(3, _translate("TransactionWindow", "PhonePe"))
        self.modeOfPaymentComboBox.setItemText(4, _translate("TransactionWindow", "Net Banking"))
        self.remarkLabel.setText(_translate("TransactionWindow", "Remark"))
        self.previousTransLabel.setText(_translate("TransactionWindow", "Previous Transactions"))
        self.submitButton.setText(_translate("TransactionWindow", "Submit"))
        self.cancelButton.setText(_translate("TransactionWindow", "Cancel"))

        # INPUT VALIDATOR
        # ----String----#
        self.myregex = QtCore.QRegExp("[A-Za-z]+")
        self.myregex3 = QtCore.QRegExp("[A-Za-z ]+")
        self.myregex2 = QtCore.QRegExp("[0-9A-Za-z, -]+")
        self.myregexph = QtCore.QRegExp("[0-9]+")

        # validate name
        self.nameInput.textChanged.connect(self.validate_name)
        # validate amount
        self.transactionAmtInput.textChanged.connect(self.validate_amt_2)

    def validate_name(self):
        my_validator = QtGui.QRegExpValidator(self.myregex3, self.nameInput)
        self.nameInput.setValidator(my_validator)

    def validate_amt_2(self):
        my_validator = QtGui.QRegExpValidator(self.myregexph, self.transactionAmtInput)
        self.transactionAmtInput.setValidator(my_validator)
